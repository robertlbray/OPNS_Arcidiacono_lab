p.w=3
mean(d$i.t==0)
alpha=.3
eta.q=4
mu=1
sigma=1
Q=10
beta=.9
pi.fn<-get.payoff.fn(data.frame(p.r=p.r, p.w=p.w, alpha=alpha, eta.q=eta.q))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
f.fn(10)
mu.hat=mu
sigma.hat=sigma
beta.hat=beta
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
f.fn(10)
f.fn(1)
f.fn(2)
num.points=50
inv.grid=seq(0, Q, length.out=num.points)
Vectorize(f.fn)(inv.grid)
num.points=5
inv.grid=seq(0, Q, length.out=num.points)
Vectorize(f.fn)(inv.grid)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
i.t=4
predict(spline, i.t)$y
predict(spline, 7)$y
f.fn<-function(i.t) predict(spline, i.t)$y
Vectorize(f.fn)(inv.grid)
num.points=50
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=50
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
f.fn(seq(0, 10, length.out=100))
plot(f.fn(seq(0, 10, length.out=100)))
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
analytical.CCP(5, 1)
analytical.CCP(5, 2)
analytical.CCP(5, 3)
analytical.CCP(5, 5)
analytical.CCP(10, 5)
analytical.CCP(10, 2)
analytical.CCP(10, 10)
log.likelihood<-function(theta){
pi.fn<-get.payoff.fn(get.param(theta))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=50
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
#CCPs
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
daply(d, 'period', function(s){
this.CCP<-analytical.CCP(s$i.t, s$s.t)
c(log(this.CCP), log(1-this.CCP))[1+(s$q.t==0)]
}) %>%
sum() %>%
prod(-1)
}
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=10000))
log.likelihood<-function(theta){
pi.fn<-get.payoff.fn(get.param(theta))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=20
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
#CCPs
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
daply(d, 'period', function(s){
this.CCP<-analytical.CCP(s$i.t, s$s.t)
c(log(this.CCP), log(1-this.CCP))[1+(s$q.t==0)]
}) %>%
sum() %>%
prod(-1)
}
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=10000))
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=500, trace=T))
log.likelihood<-function(theta){
print(theta)
pi.fn<-get.payoff.fn(get.param(theta))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=20
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
#CCPs
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
daply(d, 'period', function(s){
this.CCP<-analytical.CCP(s$i.t, s$s.t)
c(log(this.CCP), log(1-this.CCP))[1+(s$q.t==0)]
}) %>%
sum() %>%
prod(-1)
}
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=500, trace=T))
log.likelihood<-function(theta){
print(get.param(theta))
pi.fn<-get.payoff.fn(get.param(theta))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=20
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
#CCPs
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
daply(d, 'period', function(s){
this.CCP<-analytical.CCP(s$i.t, s$s.t)
c(log(this.CCP), log(1-this.CCP))[1+(s$q.t==0)]
}) %>%
sum() %>%
prod(-1)
}
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=500, trace=T))
log.likelihood<-function(theta){
print(get.param(theta))
pi.fn<-get.payoff.fn(get.param(theta))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
#for speed, approximate f.fn() with splines
num.points=15
inv.grid=seq(0, Q, length.out=num.points)
spline=data.frame(i.t=inv.grid, f.it=Vectorize(f.fn)(inv.grid)) %>%
smooth.spline()
f.fn<-function(i.t) predict(spline, i.t)$y
#CCPs
analytical.CCP<-function(i.t, s.t) (1+exp(pi.fn(i.t, s.t, 0)-pi.fn(i.t, s.t, Q-i.t+s.t)+beta*(f.fn(i.t-s.t)-f.fn(Q))))^(-1)
daply(d, 'period', function(s){
this.CCP<-analytical.CCP(s$i.t, s$s.t)
c(log(this.CCP), log(1-this.CCP))[1+(s$q.t==0)]
}) %>%
sum() %>%
prod(-1)
}
o<-optim(c(log(p.r)-log(p.w), log(p.w), log(alpha), log(eta.q)), log.likelihood, control=list(maxit=500))
f.fn<-function(i.t1){
integrand<-function(s.t1) dlnorm(s.t1, meanlog=mu.hat, sdlog=sigma.hat)*(pi.fn(i.t1, s.t1, Q-i.t1+s.t1)-log(CCP.fn(i.t1, s.t1)))
#take expectation across s.t1
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t1)$value, #continuous part
(1-plnorm(i.t1, meanlog=mu, sdlog=sigma))*(pi.fn(i.t1, i.t1, Q)-log(CCP.fn(i.t1, i.t1))) #discrete part
)
}
num.points=50
inv.grid=seq(0, Q, length.out=num.points)
ldply(inv.grid, function(l) data.frame(i.t=l, f.it=f.fn(l)), .parallel=T)
num.points=5
inv.grid=seq(0, Q, length.out=num.points)
ldply(inv.grid, function(l) data.frame(i.t=l, f.it=f.fn(l)), .parallel=T)
smooth.spline()
spline=ldply(inv.grid, function(l) data.frame(i.t=l, f.it=f.fn(l)), .parallel=T) %>%
smooth.spline()
spline
head(d)
plnorm(5)
log.likelihood<-function(mu, sigma){
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, mean=mu, sdlog=sigma))) else return(log(1-plnorm(s$i.t, mean=mu, sdlog=sigma)))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
head(d)
optim(c(0, 1), log.likelihood)
log.likelihood<-function(mu, sigma){
browser()
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, mean=mu, sdlog=sigma))) else return(log(1-plnorm(s$i.t, mean=mu, sdlog=sigma)))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
mu
sigma
log.likelihood<-function(theta){
print(theta)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, mean=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, mean=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
log.likelihood<-function(theta){
print(theta)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
log.likelihood<-function(theta){
print(theta)
browser()
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
ls()
theta
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum()
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>% summary()
z=ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T)
filter(z, z< -1000)
filter(z, z$V1< -1000)
head(z)
head(d)
d[1, 's.t']<-10
head(d)
log.likelihood<-function(theta){
print(theta)
browser()
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
log.likelihood<-function(theta){
print(theta)
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
optim(c(0, 1), log.likelihood)
z=optim(c(0, 1), log.likelihood)$par
warnings()
z
class(z)
z %>% as.data.frame
z %>% data.frame()
estimateDemandParameters(d)
estimateDemandParameters<-function(d){
log.likelihood<-function(theta){
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
o=optim(c(0, 1), log.likelihood)$par
data.frame(mu.hat=o[1], sigma.hat=o[2]) %>%
easy.save('demandParm.txt')
}
estimateDemandParameters(d)
easy.load('demandParm.txt')
estimateCCPs<-function(d){
#Input: data.frame d that has values period, period-start inventory level i.t, sales s.t, and order quantity q.t
#Output: a function that returns the likelihood of an order, given period-start inventory level i.t, and sales s.t
kernel.reg=d %>%
mutate(order=as.numeric(q.t>0)) %>%
npreg(order~i.t+s.t, data=.)
function(i.t, s.t) predict(kernel.reg, newdata=data.frame(i.t=i.t, s.t=s.t)) %>%
easy.save('ccpEsts.txt')
}
estimateCCPs<-function(d){
#Input: data.frame d that has values period, period-start inventory level i.t, sales s.t, and order quantity q.t
#Output: a function that returns the likelihood of an order, given period-start inventory level i.t, and sales s.t
kernel.reg=d %>%
mutate(order=as.numeric(q.t>0)) %>%
npreg(order~i.t+s.t, data=.)
function(i.t, s.t) predict(kernel.reg, newdata=data.frame(i.t=i.t, s.t=s.t)) %>%
easy.save('ccpEst.txt')
}
estimateCCPs(d)
estimateCCPs<-function(d){
#Input: data.frame d that has values period, period-start inventory level i.t, sales s.t, and order quantity q.t
#Output: a function that returns the likelihood of an order, given period-start inventory level i.t, and sales s.t
kernel.reg=d %>%
mutate(order=as.numeric(q.t>0)) %>%
npreg(order~i.t+s.t, data=.)
ccp<-function(i.t, s.t) predict(kernel.reg, newdata=data.frame(i.t=i.t, s.t=s.t))
easy.save(ccp, 'ccpEst.txt')
}
estimateCCPs(d)
Q=max(d$i.t)
CCP.fn<-easy.load('ccpEst.txt')
mu.sigma<-easy.load('demandEsts.txt')
estimateDemandParameters<-function(d){
log.likelihood<-function(theta){
ddply(d, 'period', function(s){
if(s$s.t<s$i.t) return(log(dlnorm(s$s.t, meanlog=theta[1], sdlog=theta[2]))) else return(log(1-plnorm(s$i.t, meanlog=theta[1], sdlog=theta[2])))
}, .parallel=T) %>%
sum() %>%
prod(-1)
}
o=optim(c(0, 1), log.likelihood)$par
data.frame(mu.hat=o[1], sigma.hat=o[2]) %>%
easy.save('demandEsts.txt')
}
estimateDemandParameters(d)
mu.sigma<-easy.load('demandEsts.txt')
mu.sigma
?smooth.spline
?np
library('chebpol')
install.packages('chebpol')
library('chebpol')
num.knots=20
cheb.grid=expand.grid(chebknots(dims=rep(num.knots, 3), intervals=statespace))
num.knots=20
cheb.grid=expand.grid(chebknots(dims=rep(num.knots, 3), intervals=c(0, Q)))
?chebknots
num.knots=20
cheb.grid=expand.grid(chebknots(dims=rep(num.knots, 3), intervals=list(c(0, Q))))
cheb.grid
head(cheb.grid)
num.knots=20
cheb.grid=expand.grid(chebknots(dims=num.knots, intervals=list(c(0, Q))))
head(cheb.grid)
cheb.grid
rm(inv.grid)
E.V.t
E.V.t=data.frame(i.t=seq(0, 10, length.out=20), value=seq(0, 10, length.out=20)^2)
head(E.V.t)
d=E.V.t
chebappx
?chebappx
chebappx(d)
chebappx(d$value)
(d$value)
chebappx(val=d$value, intervals=d$i.t)
chebappxf(fun=function(x) x^2, dims=10, intervals=c(0, Q))
chebappxf(fun=function(x) x^2, dims=10, intervals=c(0, Q))(3)
chebappxf(fun=function(x) x^2, dims=10, intervals=c(0, Q))(3.1)
3.1^2
z=chebappxf(fun=function(x) x^2, dims=10, intervals=c(0, Q))
head(z)
z
num.knots=25
p.r=3
p.w=1
alpha=.3
eta.q=4
mu=1
sigma=1
Q=10
beta=.95
pi.fn<-get.payoff.fn(data.frame(p.r=p.r, p.w=p.w, alpha=alpha, eta.q=eta.q))
num.knots=25
bellman.operator<-function(E.V.t1){
#This function is equivolent to the T operator in equation (12.3.9) of Judd (1998)
#Input: a function that characterizes E_{s_{t+1}}[V(i_{t+1}, s_{t+1})|i_{t+1}=x].
#Output: a function that characterizes E_{s_{t}}[V(i_{t}, s_{t})|i_{t}=x] (i.e., the same function after one more value function itteration)
#Calc value function with inclusive value
V.t<-function(i.t, s.t){
eulers.constant=-digamma(1)
eulers.constant+log(exp(pi.fn(i.t, s.t, 0)+beta*E.V.t1(i.t-s.t))+exp(pi.fn(i.t, s.t, Q-i.t+s.t)+beta*E.V.t1(Q)))
}
E.V.t<-function(i.t){
#integrate across possible s.t values.
integrand<-function(s.t) dlnorm(s.t, meanlog=mu, sdlog=sigma)*V.t(i.t, s.t)
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t)$value, #continuous part
(1-plnorm(i.t, meanlog=mu, sdlog=sigma))*V.t(i.t, i.t) #discrete part
)
}
chebappxf(fun=E.V.t, dims=num.knots, intervals=c(0, Q))
}
E.V.t1<-function(i.t) 0
E.V.t1(4)
epsilon=.01
diff=epsilon+1
E.V.t=bellman.operator(E.V.t1)
E.V.t
E.V.t(9)
E.V.t(1:10)
Vectorize(E.V.t)(1:10)
sample.points=seq(0, Q, length.out=100)
Vectorize(E.V.t)(1)
Vectorize(E.V.t)(1,2)
Vectorize(E.V.t)(c(1,2))
bellman.operator<-function(E.V.t1){
#This function is equivolent to the T operator in equation (12.3.9) of Judd (1998)
#Input: a function that characterizes E_{s_{t+1}}[V(i_{t+1}, s_{t+1})|i_{t+1}=x].
#Output: a function that characterizes E_{s_{t}}[V(i_{t}, s_{t})|i_{t}=x] (i.e., the same function after one more value function itteration)
#Calc value function with inclusive value
V.t<-function(i.t, s.t){
eulers.constant=-digamma(1)
eulers.constant+log(exp(pi.fn(i.t, s.t, 0)+beta*E.V.t1(i.t-s.t))+exp(pi.fn(i.t, s.t, Q-i.t+s.t)+beta*E.V.t1(Q)))
}
E.V.t<-function(i.t){
#integrate across possible s.t values.
integrand<-function(s.t) dlnorm(s.t, meanlog=mu, sdlog=sigma)*V.t(i.t, s.t)
sum(
integrate(Vectorize(integrand), lower=0, upper=i.t)$value, #continuous part
(1-plnorm(i.t, meanlog=mu, sdlog=sigma))*V.t(i.t, i.t) #discrete part
)
}
chebappxf(fun=E.V.t, dims=num.knots, intervals=c(0, Q)) %>%
Vectorize()
}
epsilon=.01
diff=epsilon+1
sample.points=seq(0, Q, length.out=100)
E.V.t1<-function(i.t) 0
E.V.t1(c(1, 2, 3))
E.V.t=bellman.operator(E.V.t1)
E.V.t(9)
E.V.t(1:9)
diff=max(E.V.t(sample.points)-E.V.t1(sample.points))
diff
source('~/Dropbox/teaching/OPNS910/assignments/OPNS910_Aguirregabiria1999/solution/code/modules/getValueFunction.R')
E.V.t<-getValueFunction(pi.fn=pi.fn, mu=mu, sigma=sigma, Q=Q, beta=beta)
E.V.t(9)
E.V.t(0:10)
easy.save(E.V.t, 'valueFn.txt')
source('~/Dropbox/teaching/OPNS910/assignments/OPNS910_Aguirregabiria1999/solution/code/m.R')
easy.load('costEsts.txt')
source('~/Dropbox/teaching/OPNS910/assignments/OPNS910_Aguirregabiria1999/solution/code/m.R')
exp(3)
f<-function(y) y^2; x=seq(0, 10, length.out=100); plot(x, f(x))
30000/500
